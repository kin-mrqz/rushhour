#include <iostream>
#include <string>
#include <vector>
#include <cstdlib>
#include <ctime>

using namespace std;

const int BOARD_SIZE = 6;

// Declare functions used
void addCar(string square[][BOARD_SIZE], int aboveRow, int aboveCol, int belowRow, int belowCol, int color_counter);
int* storeCarPositions(int rowA, int colA, int rowB, int colB);
pair<pair<int, int>, pair<int, int>> available_pos(string square[][BOARD_SIZE], int rowA, int colA, int rowB, int colB, bool isFlipped);
void flipBoard(string square[][BOARD_SIZE]);
void print_map(const string square[][BOARD_SIZE]);
void make_map(string square[][BOARD_SIZE]);
bool move_blocks(string square[][BOARD_SIZE], const char* color, const string& direction, int distance);


//  Main game loop. Contains the main menu and calls other functions
int main() {
    srand(time(NULL));
    // Create a 6 by 6 array
    string square[BOARD_SIZE][BOARD_SIZE];

    // Populate the array
    make_map(square);

    // Print the initial map
    print_map(square);

    // Move the blocks based on user input
    string color;
    string direction;
    int distance;

    while (true) {
        cout << "Enter move command (e.g., red r 2, or 'exit' to quit): ";
        cin >> color;

        if (color == "exit") {
            break;
        }

        cin >> direction >> distance;

        if (color == "red" && (direction == "r" || direction == "l") && distance >= 1) {
            if (move_blocks(square, "ðŸŸ¥", direction, distance)) {
                cout << endl;
                // Print the updated map
                print_map(square);
            } else {
                cout << "Invalid move command." << endl;
            }
        } else {
            cout << "Invalid move command." << endl;
        }

    }
        return 0;
    }


// Function to add a car to the square
void addCar(string square[][BOARD_SIZE], int aboveRow, int aboveCol, int belowRow, int belowCol, int color_counter){
    string colors[] = {"ðŸŸ§", "ðŸŸ¦", "ðŸŸª", "ðŸŸ¨", "ðŸŸ«", "â¬›", "ðŸŸ©"};
    string vehicle = colors[color_counter];
    square[aboveRow][aboveCol] = vehicle;
    square[belowRow][belowCol] = vehicle;
}

// Function to store car positions in an array
int* storeCarPositions(int rowA, int colA, int rowB, int colB) {
    int* positions = new int[4];
    positions[0] = rowA;
    positions[1] = colA;
    positions[2] = rowB;
    positions[3] = colB;
    cout << "previous pos: " << rowA << " " << colA << "; " << rowB << " " << colB << endl;
    return positions;
}

// Function to find available positions for a car
pair<pair<int, int>, pair<int, int>> available_pos(string square[][BOARD_SIZE], int rowA, int colA, int rowB, int colB, bool isFlipped) {
    vector<pair<int, int>> pairs;

    for (int c = 0; c <= BOARD_SIZE - 1; ++c) {
        // Check if the cell above is available
        if ((!isFlipped && rowA - 1 >= 0 && square[rowA][c] == "ðŸŸ¦" && square[rowA - 1][c] == "ðŸŸ¦") ||
            (isFlipped && c != colA && c != colB && square[rowA][c] == "ðŸŸ¦" && square[rowA - 1][c] == "ðŸŸ¦")) {
            pairs.push_back(make_pair(rowA, c));
            pairs.push_back(make_pair(rowA - 1, c));
            cout << "blocks above: " << rowA << " " << c << "; " << rowA - 1 << " " << c << endl;
        }

        // Check if the cell below is available
        if ((!isFlipped && rowB + 1 < BOARD_SIZE && square[rowB][c] == "ðŸŸ¦" && square[rowB + 1][c] == "ðŸŸ¦") ||
            (isFlipped && c != colA && c != colB && square[rowB][c] == "ðŸŸ¦" && square[rowB + 1][c] == "ðŸŸ¦")) {
            pairs.push_back(make_pair(rowB, c));
            pairs.push_back(make_pair(rowB + 1, c));
            cout << "blocks below: " << rowB << " " << c << "; " << rowB + 1 << " " << c << endl;
        }
    }

    if (pairs.empty()) {
        cout << "failed to complete" << endl;
        return make_pair(make_pair(-1, -1), make_pair(-1, -1)); // No available positions found
    }

    // Randomly select a pair of available positions
    srand(time(NULL));
    int randomIndex = rand() % (pairs.size() / 2);
    randomIndex = randomIndex * 2;
    cout << "Random index: " << randomIndex << "; sample: " << pairs[randomIndex].first << " " << pairs[randomIndex].second << endl;
    return make_pair(pairs[randomIndex], pairs[randomIndex + 1]);
}

// Function to flip the board
void flipBoard(string square[][BOARD_SIZE]) {
    string temp[BOARD_SIZE][BOARD_SIZE];

    // Copy the contents of the original square array to a temporary array
    for (int i = 0; i < BOARD_SIZE; ++i) {
        for (int j = 0; j < BOARD_SIZE; ++j) {
            temp[i][j] = square[i][j];
        }
    }

    // Flip the rows and columns in the temporary array
    for (int i = 0; i < BOARD_SIZE; ++i) {
        for (int j = 0; j < BOARD_SIZE; ++j) {
            square[j][i] = temp[i][j];
        }
    }
}

// Function to print the array with white color
void print_map(const string square[][BOARD_SIZE]) {
    for (int i = 0; i < BOARD_SIZE; ++i) {
        for (int j = 0; j < BOARD_SIZE; ++j) {
            cout << square[i][j];
        }
        cout << endl;
    }
}

// Function to create the 6 by 6 array
void make_map(string square[][BOARD_SIZE]) {
    bool isFlipped = false;
    int color_counter = 0;
    // Fill the array with white spaces
    for (int i = 0; i < BOARD_SIZE; ++i) {
        for (int j = 0; j < BOARD_SIZE; ++j) {
            square[i][j] = "ðŸŸ¦";
        }
    }

    // Set specific positions to red color
    square[2][0] = "ðŸŸ¥"; // Red square emoji
    square[2][1] = "ðŸŸ¥"; // Red square emoji

    // Generate the first car
    int* carPositions = storeCarPositions(2, 0, 2, 1);

    // Generate subsequent cars
    int NUM_CARS = 6;
    for (int i = 1; i < NUM_CARS; ++i) {
        // flipBoard(square); // Flip the board before generating the next car
        int rowA = carPositions[0];
        int colA = carPositions[1];
        int rowB = carPositions[2];
        int colB = carPositions[3];
        pair<pair<int, int>, pair<int, int>> result = available_pos(square, rowA, colA, rowB, colB, isFlipped);
        pair<int, int> aboveIndices = result.first;
        pair<int, int> belowIndices = result.second;

        if (aboveIndices.first == -1 && aboveIndices.second == -1 && belowIndices.first == -1 && belowIndices.second == -1) {
            // Handle the case where no available positions are found
            cout << "No available positions found" << endl;
        break; // Exit the loop
    }
        
        int aboveRow = aboveIndices.first;
        int aboveCol = aboveIndices.second;

        int belowRow = belowIndices.first;
        int belowCol = belowIndices.second;
        addCar(square, aboveRow, aboveCol, belowRow, belowCol, color_counter);

        cout << "indices: " << aboveRow << " " << aboveCol << "; " << belowRow << " " << belowCol << endl;
        
        delete[] carPositions; // Free the memory of the previous car positions
        print_map(square);
        carPositions = storeCarPositions(aboveCol, aboveRow, belowCol, belowRow); //Must also flip coords 
        flipBoard(square);
        isFlipped = !isFlipped;
        ++color_counter;
    }

    // Cleanup: Free the memory of the last car positions
    flipBoard(square);
    delete[] carPositions;
}

// Function to move the red car
bool move_blocks(string square[][BOARD_SIZE], const char* color, const string& direction, int distance) {
    // Find the current positions of the blocks with the specified color
    vector<pair<int, int> > blockPositions;
    for (int i = 0; i < BOARD_SIZE; ++i) {
        for (int j = 0; j < BOARD_SIZE; ++j) {
            if (square[i][j] == color) {
                blockPositions.push_back(make_pair(i, j));
            }
        }
    }

    // Move each block based on the direction and distance
    for (auto& position : blockPositions) {
        int row = position.first;
        int col = position.second;

        if (direction == "r") {
            if (col + distance < BOARD_SIZE && (square[row][col + distance] == "ðŸŸ¦" || square[row][col + distance] == color)) {
                if (distance == 1) {
                    square[row][col] = "ðŸŸ¦";
                    square[row][col + distance] = color;
                    square[row][col + distance + 1] = color;
                    break;
                }
                square[row][col] = "ðŸŸ¦";
                square[row][col + distance] = color;

                // Turn the block on the left side of the red block blue
                if (col - 1 >= 0 && square[row][col - 1] != "ðŸŸ¥") {
                    square[row][col - 1] = "ðŸŸ¦";
                    square[row][col] = "ðŸŸ¦";
                }
            } else {
                cout << "Invalid input." << endl;
                return false;
            }
        } else if (direction == "l") {
            if (col - distance >= 0 && (square[row][col - distance] == "ðŸŸ¦" || square[row][col - distance] == color)) {
                square[row][col] = "ðŸŸ¦";
                square[row][col - distance] = color;

                // Turn the block on the right side of the red block red
                if (col + 1 < BOARD_SIZE && square[row][col + 1] != "ðŸŸ¥") {
                    square[row][col + 1] = "ðŸŸ¥";
                    square[row][col] = "ðŸŸ¦";
                }
            } else {
                cout << "Invalid input." << endl;
                return false;
            }
        }
    }

    return true;
}
